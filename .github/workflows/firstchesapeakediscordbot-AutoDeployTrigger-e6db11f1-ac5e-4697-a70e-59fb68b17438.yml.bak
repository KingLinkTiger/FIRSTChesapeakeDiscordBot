name: Trigger auto deployment for firstchesapeakediscordbot

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: 
      [ v2 ]
    paths:
    - '**'
    - '.github/workflows/firstchesapeakediscordbot-AutoDeployTrigger-e6db11f1-ac5e-4697-a70e-59fb68b17438.yml'

  # Allow mannually trigger 
  workflow_dispatch:
    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
        with:
          cosign-release: 'v1.9.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.FIRSTCHESAPEAKEDISCORDBOT_AZURE_CREDENTIALS }}

      - name: Lowercase Github Repository Name
        id: lowerGITHUB_REPOSITORY
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.repository }}

      - name: Lowercase Github Repo Name
        id: lowerREPO_NAME
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.event.repository.name }}

      - name: DEBUG - ROLE_REACTIONMONITOR
        run: echo ${{secrets.ROLE_REACTIONMONITOR }} | sed 's/./& /g'

#      - name: 'Deploy to Azure Container Instances'
#        uses: 'azure/aci-deploy@v1'
#        with:
#          resource-group: ${{ secrets.RESOURCE_GROUP }}
#          dns-name-label: ${{ steps.lowerREPO_NAME.outputs.lowercase }}${{ github.run_number }}
#          image: ${{ env.REGISTRY }}/${{ steps.lowerGITHUB_REPOSITORY.outputs.lowercase }}:v2
#          registry-login-server: ${{ env.REGISTRY }}
#          registry-username: ${{ github.actor }}
#          registry-password: ${{ secrets.GITHUB_TOKEN }}
#          name: ${{ steps.lowerREPO_NAME.outputs.lowercase }}
#          location: 'east us'
#          restart-policy: 'Never'
#          memory: '1'
#          os-type: 'Linux'
#          secure-environment-variables: BOOL_FTCEVENTSSERVER="${{ secrets.BOOL_FTCEVENTSSERVER }}" BOTADMINCHANNELS="${{ secrets.BOTADMINCHANNELS }}" BOTMATCHRESULTCHANNELS="${{ secrets.BOTMATCHRESULTCHANNELS }}" BOTPRODUCTIONCHANNELS="${{ secrets.BOTPRODUCTIONCHANNELS }}" BOTTTSCHANNEL="${{ secrets.BOTTTSCHANNEL }}" BOTTTSENABLED="${{ secrets.BOTTTSENABLED }}" DISCORD_TOKEN="${{ secrets.DISCORD_TOKEN }}" FRCEVENTS_KEY="${{ secrets.FRCEVENTS_KEY }}" FTCEVENTSERVER="${{ secrets.FTCEVENTSERVER }}" FTCEVENTSERVER_APIKEY="${{ secrets.FTCEVENTSERVER_APIKEY }}" FTCEVENTSERVER_WEBSOCKETURL="${{ secrets.FTCEVENTSERVER_WEBSOCKETURL }}" FTCEVENTS_KEY="${{ secrets.FTCEVENTS_KEY }}" ID_CHANNEL_REACTIONMONITOR="${{ secrets.ID_CHANNEL_REACTIONMONITOR }}" ID_CHANNEL_VOICE_COMMENTATORLIVE="${{ secrets.ID_CHANNEL_VOICE_COMMENTATORLIVE }}" ID_MESSAGE_REACTIONMONITOR="${{ secrets.ID_MESSAGE_REACTIONMONITOR }}" LOGFOLDER="${{ secrets.LOGFOLDER }}" LOGLEVEL="${{ secrets.LOGLEVEL }}" MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}" MYSQL_HOST="${{ secrets.MYSQL_HOST }}" MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" MYSQL_RANKINGTABLE="${{ secrets.MYSQL_RANKINGTABLE }}" MYSQL_TABLE="${{ secrets.MYSQL_TABLE }}" MYSQL_USER="${{ secrets.MYSQL_USER }}" ROLE_ACTIVECOMMENTATOR="${{ secrets.ROLE_ACTIVECOMMENTATOR }}" ROLE_ADMINISTRATOR="${{ secrets.ROLE_ADMINISTRATOR }}" ROLE_COMMENTATOR="${{ secrets.ROLE_COMMENTATOR }}" ROLE_NEWUSER="${{ secrets.ROLE_NEWUSER }}" ROLE_REACTIONMONITOR="${{ secrets.ROLE_REACTIONMONITOR }}" TOA_KEY="${{ secrets.TOA_KEY }}" ID_Message_ReactionMonitor="${{ secrets.ID_Message_ReactionMonitor }}"